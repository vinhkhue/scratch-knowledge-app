"""
Main Streamlit App for Scratch Knowledge Graph
"""
import streamlit as st
import asyncio
import logging
from typing import Dict, Any, Optional
import sys
from pathlib import Path

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Add current directory to path for imports
sys.path.append(str(Path(__file__).parent))

from config import APP_TITLE, APP_DESCRIPTION
from utils.graphrag_query import graphrag_query
from utils.web_search import web_search_tool
from utils.graph_viz import graph_visualizer

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def setup_page_config():
    """Setup Streamlit page configuration"""
    st.set_page_config(
        page_title=APP_TITLE,
        page_icon="üß©",
        layout="wide",
        initial_sidebar_state="expanded"
    )

def display_header():
    """Display app header and description"""
    st.title(f"üß© {APP_TITLE}")
    st.markdown(f"**{APP_DESCRIPTION}**")
    st.markdown("---")
    
    # Add info about the app
    with st.expander("‚ÑπÔ∏è Gi·ªõi thi·ªáu v·ªÅ ·ª©ng d·ª•ng"):
        st.markdown("""
        **Scratch Knowledge Graph** l√† h·ªá th·ªëng truy v·∫•n ki·∫øn th·ª©c th√¥ng minh ƒë∆∞·ª£c x√¢y d·ª±ng d·ª±a tr√™n:
        
        - **GraphRAG**: S·ª≠ d·ª•ng Knowledge Graph ƒë·ªÉ t√¨m ki·∫øm v√† tr·∫£ l·ªùi c√¢u h·ªèi
        - **Web Search**: T·ª± ƒë·ªông t√¨m ki·∫øm th√¥ng tin b·ªï sung khi c·∫ßn thi·∫øt
        - **Graph Visualization**: Hi·ªÉn th·ªã m·ªëi quan h·ªá gi·ªØa c√°c kh√°i ni·ªám
        
        **C√°ch s·ª≠ d·ª•ng:**
        1. Nh·∫≠p c√¢u h·ªèi v·ªÅ l·∫≠p tr√¨nh Scratch v√†o √¥ b√™n d∆∞·ªõi
        2. H·ªá th·ªëng s·∫Ω t√¨m ki·∫øm trong c∆° s·ªü d·ªØ li·ªáu ki·∫øn th·ª©c
        3. N·∫øu kh√¥ng t√¨m th·∫•y, s·∫Ω t·ª± ƒë·ªông t√¨m ki·∫øm tr√™n web
        4. K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã k√®m graph minh h·ªça (n·∫øu c√≥)
        """)

def display_sidebar():
    """Display sidebar with additional options"""
    st.sidebar.title("‚öôÔ∏è C√†i ƒë·∫∑t")
    
    # Search options
    st.sidebar.subheader("üîç T√πy ch·ªçn t√¨m ki·∫øm")
    search_type = st.sidebar.selectbox(
        "Lo·∫°i t√¨m ki·∫øm GraphRAG:",
        ["T·ª± ƒë·ªông", "Local Search", "Global Search"],
        help="Local Search: T√¨m ki·∫øm c·ª•c b·ªô trong c√°c th·ª±c th·ªÉ li√™n quan\nGlobal Search: T√¨m ki·∫øm to√†n c·ª•c trong t·∫•t c·∫£ b√°o c√°o c·ªông ƒë·ªìng"
    )
    
    # Graph options
    st.sidebar.subheader("üìä T√πy ch·ªçn Graph")
    show_graph = st.sidebar.checkbox("Hi·ªÉn th·ªã graph", value=True)
    max_nodes = st.sidebar.slider("S·ªë n√∫t t·ªëi ƒëa", 10, 100, 50)
    
    # Advanced options
    with st.sidebar.expander("üîß T√πy ch·ªçn n√¢ng cao"):
        min_response_length = st.number_input(
            "ƒê·ªô d√†i t·ªëi thi·ªÉu c√¢u tr·∫£ l·ªùi", 
            min_value=10, max_value=200, value=50
        )
        enable_web_search = st.checkbox("B·∫≠t t√¨m ki·∫øm web", value=True)
    
    return {
        'search_type': search_type,
        'show_graph': show_graph,
        'max_nodes': max_nodes,
        'min_response_length': min_response_length,
        'enable_web_search': enable_web_search
    }

async def process_query(query: str, options: Dict[str, Any]) -> Dict[str, Any]:
    """Process user query and return results"""
    results = {
        'query': query,
        'source': None,
        'response': '',
        'context_data': None,
        'graph_stats': None,
        'error': None
    }
    
    try:
        # First, try GraphRAG search
        st.info("üîç ƒêang t√¨m ki·∫øm trong c∆° s·ªü d·ªØ li·ªáu ki·∫øn th·ª©c...")
        
        if options['search_type'] == "Local Search":
            response, context_data = await graphrag_query.local_search(query)
        elif options['search_type'] == "Global Search":
            response, context_data = await graphrag_query.global_search(query)
        else:  # Auto
            # Try local search first, then global if needed
            response, context_data = await graphrag_query.local_search(query)
            if not graphrag_query.is_response_valid(response):
                response, context_data = await graphrag_query.global_search(query)
        
        # Check if LLM requested web search
        if response == "activate_web_search_tool":
            logger.info("LLM requested web search - switching to web search")
            
            if options['enable_web_search']:
                st.warning("‚ö†Ô∏è LLM ph√°t hi·ªán th√¥ng tin kh√¥ng ƒë·ªß. ƒêang t√¨m ki·∫øm th√¥ng tin m·ªõi nh·∫•t tr√™n web...")
                
                web_response = await web_search_tool.search(query)
                results['source'] = 'Web Search Tool (LLM Requested)'
                results['response'] = web_response
                results['graph_stats'] = {'nodes': 0, 'edges': 0, 'density': 0, 'connected_components': 0}
                results['context_data'] = context_data
            else:
                results['source'] = 'GraphRAG'
                results['response'] = "Th√¥ng tin kh√¥ng ƒë·ªß trong c∆° s·ªü d·ªØ li·ªáu. Web search b·ªã t·∫Øt."
                results['graph_stats'] = {'nodes': 0, 'edges': 0, 'density': 0, 'connected_components': 0}
                results['context_data'] = context_data
        
        # Check if GraphRAG response is valid
        elif graphrag_query.is_response_valid(response):
            # T√≠nh to√°n graph stats tr∆∞·ªõc
            graph_stats = graph_visualizer.get_graph_stats(
                context_data['entities'], 
                context_data['relationships']
            )
            
            # Ki·ªÉm tra graph quality ƒë·ªÉ quy·∫øt ƒë·ªãnh c√≥ d√πng web search kh√¥ng
            if graphrag_query.should_use_web_search(graph_stats, len(context_data['entities'])):
                # Graph quality k√©m - chuy·ªÉn sang web search
                logger.info(f"Graph quality check: edges={graph_stats.get('edges', 0)}, density={graph_stats.get('density', 0):.3f}, entities={len(context_data['entities'])}")
                logger.info("Switching to web search due to poor graph quality")
                
                if options['enable_web_search']:
                    st.warning("‚ö†Ô∏è Ch·∫•t l∆∞·ª£ng graph th·∫•p (m·∫≠t ƒë·ªô th·∫•p, √≠t m·ªëi quan h·ªá). ƒêang t√¨m ki·∫øm tr√™n web...")
                    
                    web_response = await web_search_tool.search(query)
                    results['source'] = 'Web Search Tool'
                    results['response'] = web_response
                    results['graph_stats'] = graph_stats
                    results['context_data'] = context_data
                else:
                    results['source'] = 'GraphRAG'
                    results['response'] = "Ch·∫•t l∆∞·ª£ng graph th·∫•p. Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p."
                    results['graph_stats'] = graph_stats
                    results['context_data'] = context_data
            else:
                # Graph quality t·ªët - d√πng GraphRAG
                logger.info(f"Graph quality check: edges={graph_stats.get('edges', 0)}, density={graph_stats.get('density', 0):.3f}, entities={len(context_data['entities'])}")
                logger.info("Using GraphRAG due to good graph quality")
                
                results['source'] = 'GraphRAG Knowledge Graph'
                results['response'] = response
                results['graph_stats'] = graph_stats
                results['context_data'] = context_data
        else:
            # GraphRAG didn't find good results, try web search
            if options['enable_web_search']:
                st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p trong c∆° s·ªü d·ªØ li·ªáu. ƒêang t√¨m ki·∫øm tr√™n web...")
                
                web_response = await web_search_tool.search(query)
                results['source'] = 'Web Search Tool'
                results['response'] = web_response
                results['graph_stats'] = {'nodes': 0, 'edges': 0, 'density': 0, 'connected_components': 0}
                results['context_data'] = context_data
            else:
                results['source'] = 'GraphRAG'
                results['response'] = "Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p cho c√¢u h·ªèi n√†y trong c∆° s·ªü d·ªØ li·ªáu ki·∫øn th·ª©c."
                results['graph_stats'] = {'nodes': 0, 'edges': 0, 'density': 0, 'connected_components': 0}
                results['context_data'] = context_data
                results['error'] = "No results found"
    
    except Exception as e:
        logger.error(f"Error processing query: {e}")
        results['error'] = str(e)
        results['response'] = f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi: {str(e)}"
    
    return results

def display_results(results: Dict[str, Any], options: Dict[str, Any]):
    """Display query results"""
    if results['error']:
        st.error(f"‚ùå L·ªói: {results['error']}")
        return
    
    # Display response
    st.subheader("üí¨ C√¢u tr·∫£ l·ªùi")
    
    # Source indicator
    if results['source'] == 'GraphRAG Knowledge Graph':
        st.success("‚úÖ **Ngu·ªìn: GraphRAG Knowledge Graph**")
    elif results['source'] == 'Web Search Tool':
        st.info("üåê **Ngu·ªìn: Web Search Tool**")
        
        # Hi·ªÉn th·ªã l√Ω do chuy·ªÉn sang web search n·∫øu c√≥
        if results.get('graph_stats'):
            
            graph_stats = results['graph_stats']
            reasons = []
            
            if graph_stats.get('edges', 0) == 0:
                reasons.append("‚Ä¢ Kh√¥ng c√≥ m·ªëi quan h·ªá n√†o gi·ªØa c√°c kh√°i ni·ªám")
            if graph_stats.get('density', 0) < 0.05:
                reasons.append(f"‚Ä¢ M·∫≠t ƒë·ªô graph qu√° th·∫•p ({graph_stats.get('density', 0):.3f})")
            if len(results['context_data']['entities']) < 2:
                reasons.append(f"‚Ä¢ Qu√° √≠t entities ({len(results['context_data']['entities'])})")
            if graph_stats.get('connected_components', 0) == len(results['context_data']['entities']):
                reasons.append("‚Ä¢ T·∫•t c·∫£ nodes ƒë·ªÅu ri√™ng l·∫ª")
            st.info("üîç **L√Ω do chuy·ªÉn sang Web Search:** " + ", ".join(reasons))
            
    
    # Response content
    st.markdown(results['response'])
    
    # Display graph if available and requested
    if (results['source'] in ['GraphRAG', 'GraphRAG Knowledge Graph'] and 
        results['context_data'] and 
        options['show_graph'] and
        'entities' in results['context_data'] and 
        'relationships' in results['context_data']):
        
        entities = results['context_data']['entities']
        relationships = results['context_data']['relationships']
        
        if not entities.empty and not relationships.empty:
            st.subheader("üìä Graph Minh h·ªça")
            
            # Graph statistics
            if results['graph_stats']:
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("S·ªë n√∫t", results['graph_stats']['nodes'])
                with col2:
                    st.metric("S·ªë c·∫°nh", results['graph_stats']['edges'])
                with col3:
                    st.metric("M·∫≠t ƒë·ªô", f"{results['graph_stats']['density']:.3f}")
                with col4:
                    st.metric("Th√†nh ph·∫ßn li√™n th√¥ng", results['graph_stats']['connected_components'])
            
            # Create and display graph
            try:
                fig = graph_visualizer.visualize(
                    entities, 
                    relationships, 
                    f"Knowledge Graph cho: {results['query']}"
                )
                st.pyplot(fig)
                
                # Display entity details
                with st.expander("üìã Chi ti·∫øt c√°c th·ª±c th·ªÉ"):
                    for _, entity in entities.iterrows():
                        st.markdown(f"**{entity.get('title', entity.get('name', entity['id']))}**")
                        st.markdown(f"*{entity.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')}*")
                        st.markdown("---")
                        
            except Exception as e:
                st.error(f"L·ªói khi t·∫°o graph: {e}")
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu graph ƒë·ªÉ hi·ªÉn th·ªã")

def main():
    """Main app function"""
    setup_page_config()
    display_header()
    
    # Get options from sidebar
    options = display_sidebar()
    
    # Query input
    st.subheader("‚ùì ƒê·∫∑t c√¢u h·ªèi v·ªÅ Scratch")
    
    # Example questions
    with st.expander("üí° C√¢u h·ªèi m·∫´u"):
        example_questions = [
            "Scratch l√† g√¨?",
            "Kh·ªëi l·ªánh trong Scratch c√≥ nh·ªØng lo·∫°i n√†o?",
            "Sprite ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?",
            "C√°ch t·∫°o v√≤ng l·∫∑p trong Scratch?",
            "Phi√™n b·∫£n m·ªõi nh·∫•t c·ªßa Scratch t·ªõi ng√†y h√¥m nay l√† g√¨?"
        ]
        
        for i, question in enumerate(example_questions):
            if st.button(f"üí≠ {question}", key=f"example_{i}"):
                st.session_state.query_input = question
    
    # Query input
    query = st.text_input(
        "Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:",
        placeholder="V√≠ d·ª•: Scratch l√† g√¨? Kh·ªëi l·ªánh c√≥ nh·ªØng lo·∫°i n√†o?",
        key="query_input"
    )
    
    # Process query button
    if st.button("üîç T√¨m ki·∫øm", type="primary") or query:
        if query.strip():
            # Process query asynchronously
            with st.spinner("ƒêang x·ª≠ l√Ω c√¢u h·ªèi..."):
                results = asyncio.run(process_query(query, options))
            
            # Display results
            display_results(results, options)
        else:
            st.warning("Vui l√≤ng nh·∫≠p c√¢u h·ªèi!")

if __name__ == "__main__":
    main()



